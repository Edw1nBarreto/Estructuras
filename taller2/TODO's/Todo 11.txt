/**
 * @brief Returns the Cartesian product A × B as a set of (a, b) pairs.
 */
template <typename T>
DataSet<std::pair<T, T>> DataSet<T>::cartesianProductWith(const DataSet<T>& other) const {
    
    DataSet<std::pair<T, T>> result(this->getName() + " × " + other.getName());
    // TODO #11: Implementar la operación producto cartesiano (cartesianProductWith)
    // Esta función debe retornar un nuevo conjunto que represente el producto cartesiano
    // A × B, es decir, el conjunto de todos los pares ordenados (a, b) donde
    // a pertenece al conjunto actual (`this`) y b pertenece al conjunto `other`.
    //
    // No se deben modificar los conjuntos originales. 
    // El resultado debe incluir todos los pares posibles del producto A × B.

    const std::vector<T>& aElems = this->elements;
    const std::vector<T>& bElems = other.elements; //other es un objeto
    for (typename std::vector<T>::const_iterator itA = aElems.begin(); itA != aElems.end(); ++itA) {
    	for (typename std::vector<T>::const_iterator itB = bElems.begin(); itB != bElems.end(); ++itB) {
        	result.insert(std::pair<T,T>(*itA, *itB)); //el insert ya evita duplicados
    		}
    }
    return result;
}